// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
}

model Account {
  id                String   @id @default(uuid()) @map("_id") @db.Uuid
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Person {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  profession String?
  lastGradeCompleted String?
  churchId  String? // Add the churchId field
  church    Church?  @relation(fields: [churchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Response Result[]
}

model Church {
  id        String   @id @default(cuid())
  name      String   @unique
  address   String
  people    Person[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id       String @id @default(cuid())
  personId String @unique
  person   Person @relation(fields: [personId], references: [id])
  scores   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
